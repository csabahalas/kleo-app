"use strict";var ApplicationConfiguration=function(){var applicationModuleName="kleo",applicationModuleVendorDependencies=["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ui.utils","angularFileUpload","ui-notification","mgcrea.ngStrap.affix","mgcrea.ngStrap.button","textAngular","ui.tree"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){return void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role)?(allowed=!0,!0):void 0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin"))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){fromState.data&&fromState.data.ignoreState||($state.previous={state:fromState,params:fromParams,href:$state.href(fromState,fromParams)})})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("content"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),ApplicationConfiguration.registerModule("posts"),ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]),angular.module("content").run(["Menus","AdminService","Content",function(Menus,Admin,Content){Admin.addModel({id:"content",title:"Content",model:Content,options:{name:{title:"File ID",value:"fileId"},fields:[{title:"User",value:["user","displayName"]},{title:"Created",value:"created"}],route:"content.view",modelId:"contentId"}})}]),angular.module("content").config(["$stateProvider",function($stateProvider){$stateProvider.state("users.files",{url:"/files",template:""})}]),angular.module("content").factory("Content",["$resource",function($resource){return $resource("api/files/:fileId",{fileId:"@_id"})}]),angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin.main",roles:["admin"],position:5}),Menus.addMenuItem("topbar",{title:"Page",state:"page",roles:["*"],position:4})}]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}}).state("admin.main",{url:"",templateUrl:"modules/core/client/views/admin/admin.client.view.html",resolve:{tabs:["AdminService",function(AdminService){return AdminService.getAdminPages()}]},controller:"AdminMainController"}).state("admin.main.mode",{template:"<ui-view/>",url:"/:moduleId"}).state("admin.main.mode.item",{templateUrl:"modules/core/client/views/admin/admin-module.client.view.html",url:"/:itemId",controller:"AdminController"})}]),angular.module("core").config(["$affixProvider",function($affixProvider){angular.extend($affixProvider.defaults,{inlineStyles:!1})}]).config(["$provide",function($provide){$provide.decorator("taOptions",["$delegate","taRegisterTool","$modal",function(taOptions,taRegisterTool,$modal){return taOptions.forceTextAngularSanitize=!1,taOptions.keyMappings=[],taOptions.toolbar=[["h2","h3","h4","h5","p","pre","quote"],["ul","ol","redo","undo","clear"],["justifyLeft","justifyCenter","justifyRight","justifyFull"],["html","uploadImage","insertLink"]],taOptions.classes={focussed:"focussed",toolbar:"btn-toolbar",toolbarGroup:"btn-group",toolbarButton:"btn btn-default",toolbarButtonActive:"active",disabled:"disabled",textEditor:"form-control",htmlEditor:"form-control"},taRegisterTool("uploadImage",{buttontext:"Upload Image",iconclass:"fa fa-image",action:function(deferred,restoreSelection){return $modal.open({controller:"InsertImageController",templateUrl:"modules/core/client/views/templates/insert-image.client.html"}).result.then(function(result){restoreSelection(),document.execCommand("insertImage",!0,result),deferred.resolve()},function(){deferred.resolve()}),!1}}),taOptions}])}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0}}).state("dev",{url:"/dev",templateUrl:"modules/core/client/views/dev.client.view.html"}).state("page",{url:"/page",templateUrl:"modules/core/client/views/page.client.view.html"})}]),angular.module("core.admin").controller("AdminController",["$scope","$stateParams",function($scope,$stateParams){$scope.itemId=$stateParams.itemId}]).controller("AdminMainController",["$scope","$stateParams","tabs",function($scope,$stateParams,tabs){$scope.tabs=tabs,$scope.module=$stateParams.moduleId?": "+$stateParams.moduleId:null,$scope.item=$stateParams.itemId?": "+$stateParams.itemid:null}]),angular.module("core").controller("DevController",["$scope",function($scope){}]),angular.module("core").controller("FooterController",["$scope","SystemData",function($scope,SystemData){SystemData.getData().then(function(data){$scope.app=data,$scope.links=_.map(_.range(0,4),function(el){return _.map(_.range(0,4),function(row){var num=4*el+row+1;return 10>num&&(num="0"+num),"Map Site Link #"+num})})})}]),angular.module("core").controller("HeaderController",["$scope","$http","$state","Authentication","SystemData","Menus","NotificationService",function($scope,$http,$state,Authentication,SystemData,Menus,NotificationService){NotificationService.init(),$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=Menus.getMenu("topbar"),$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1}),$scope.getLocations=function(val){return $http.get("//maps.googleapis.com/maps/api/geocode/json",{params:{address:val,sensor:!1}}).then(function(response){return response.data.results.map(function(item){return item.formatted_address})})},SystemData.getData().then(function(data){$scope.app=data})}]),angular.module("core").controller("HomeController",["$scope","Authentication","News","NotificationService",function($scope,Authentication,News,NotificationService){$scope.authentication=Authentication,$scope.onBell=function(){setTimeout(function(){NotificationService.showNotification({title:"Kleo app",content:"Something happened!",icon:"modules/core/client/img/brand/kleo.png"})},0)},$scope.postTypes=[{key:"News",title:"News"},{key:"Post",title:"Articles"},{key:"Popular",title:"Popular tags"}],$scope.setSelected=function(item){$scope.selectedPostType&&($scope.selectedPostType.active=!1),item.active=!0,$scope.selectedPostType=item},$scope.setSelected($scope.postTypes[0]),News.getData().then(function(result){$scope.posts=result}),$scope.mainButtons=[{title:"List",icon:"list-alt"},{title:"Favourite",icon:"heart"},{title:"Books",icon:"book"},{title:"Data",icon:"barcode"},{title:"Bells",icon:"bell"},{title:"Files",icon:"folder-open"}],$scope.news=[{title:"Something new",content:"Lorem ipsum ",user:"Mary",date:"Feb 14, 2013",from:"ps.stu"},{title:"The show performed!",content:"Really great show performed last sunday",user:"J. D. Henderson",date:"Feb 14, 2013",from:"bbc.uk"}]}]),angular.module("core").controller("InsertImageController",["$scope","$modalInstance",function($scope,$modalInstance){$scope.insert=function(){$modalInstance.close($scope.image)}}]),angular.module("core").controller("PageController",["$scope","Authentication","Posts","NotificationService",function($scope,Authentication,Posts,NotificationService){$scope.authentication=Authentication,$scope.onBell=function(){setTimeout(function(){NotificationService.showNotification({title:"Kleo app",content:"Something happened!",icon:"modules/core/client/img/brand/kleo.png"})},0)},$scope.postTypes=[{key:"News",title:"News"},{key:"Post",title:"Articles"},{key:"Popular",title:"Popular tags"}],$scope.setSelected=function(item){$scope.selectedPostType&&($scope.selectedPostType.active=!1),item.active=!0,$scope.selectedPostType=item},$scope.setSelected($scope.postTypes[0]),$scope.posts=Posts.query(),$scope.mainButtons=[{title:"List",icon:"list-alt"},{title:"Favourite",icon:"heart"},{title:"Books",icon:"book"},{title:"Data",icon:"barcode"},{title:"Bells",icon:"bell"},{title:"Files",icon:"folder-open"}],$scope.news=[{title:"Something new",content:"Lorem ipsum ",user:"Mary",date:"Feb 14, 2013",from:"ps.stu"},{title:"The show performed!",content:"Really great show performed last sunday",user:"J. D. Henderson",date:"Feb 14, 2013",from:"bbc.uk"}]}]),angular.module("core").directive("adminModuleModel",["$filter","AdminService",function($filter,Admin){return{templateUrl:"modules/core/client/views/templates/admin-module-model.client.html",restrict:"E",scope:{model:"="},link:function(scope,element,attrs){scope.isArray=angular.isArray,scope.pagedItems=[],scope.itemsPerPage=10,scope.currentPage=1,scope.$watch("model",function(id){var modelObj=Admin.getModel(id);modelObj&&modelObj.model.query(function(items){scope.items=items,scope.options=modelObj.options,scope.figureOutItemsToDisplay()})}),scope.figureOutItemsToDisplay=function(){scope.filteredItems=$filter("filter")(scope.items,{$:scope.search}),scope.filterLength=scope.filteredItems.length;var begin=(scope.currentPage-1)*scope.itemsPerPage,end=begin+scope.itemsPerPage;scope.pagedItems=scope.filteredItems.slice(begin,end)},scope.pageChanged=function(){scope.figureOutItemsToDisplay()},scope.pageRoute=function(id){return scope.options.route+"({"+scope.options.modelId+": "+id+"})"}}}}]),angular.module("core").directive("kuiDropdown",[function(){return{templateUrl:"modules/core/client/views/templates/kui-dropdown.client.html",restrict:"E",scope:{title:"=",items:"="}}}]),angular.module("core").directive("kuiPostDetails",[function(){return{templateUrl:"modules/core/client/views/templates/kui-post-details.client.html",restrict:"E",scope:{post:"="}}}]),angular.module("core").directive("kuiUploadImage",["$window","$timeout","FileUploader",function($window,$timeout,FileUploader){return{templateUrl:"modules/core/client/views/templates/kui-upload-image.client.html",restrict:"E",scope:{textCenter:"=",image:"=",imageAlt:"=",imageTitle:"=",category:"=",onSuccess:"="},link:function(scope,element,attrs){scope.$watch("image",function(){scope.image&&(scope.imageUrl=scope.image)}),scope.uploader=new FileUploader({url:"api/files"}),scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),scope.uploader.onBeforeUploadItem=function(item){item.formData.push({category:scope.category})},scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){scope.imageUrl=fileReaderEvent.target.result},0)}}},scope.uploader.onErrorItem=function(fileItem,response,status,headers){scope.cancelUpload(),scope.error=response.message},scope.uploadProfilePicture=function(ev){ev.preventDefault(),scope.success=scope.error=null,scope.uploader.uploadAll()},scope.cancelUpload=function(){scope.uploader.clearQueue(),scope.imageUrl=scope.image},scope.uploader.onSuccessItem=function(fileItem,response,status,headers){scope.success=!0,scope.image=response.location,scope.onSuccess&&scope.onSuccess(scope.image),scope.$emit("imageURLChanged",scope.image)}}}}]),angular.module("core").directive("postsList",[function(){return{templateUrl:"modules/core/client/views/templates/posts-list.client.html",restrict:"E",scope:{items:"=",filter:"=",disabledAuthor:"="},link:function(scope,element,attrs){}}}]),angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?(initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)):void 0}),scope.$on("show-errors-reset",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?reset():void 0}),toggleClasses=function(invalid){return el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess?el.toggleClass("has-success",showValidationMessages&&!invalid):void 0}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(-1===attrs.showErrors.indexOf("skipFormGroupCheck")&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]),angular.module("core").directive("sidebar",[function(){return{templateUrl:"modules/core/client/views/templates/sidebar.client.html",restrict:"E",scope:{tabs:"="},link:function(scope,element,attrs){}}}]),angular.module("core").factory("AdminService",[function(){var adminPages=[{id:"config",state:'admin.main.mode({moduleId: "config"})',title:"Configuration",items:[{id:"menu",title:"Menu"}]},{id:"models",state:'admin.main.mode({moduleId: "models"})',title:"Models",items:[]},{id:"pages",state:'admin.main.mode({moduleId: "pages"})',title:"Pages",items:[]}];return{getAdminPages:function(){return adminPages},addModel:function(model){model.state='admin.main.mode.item({moduleId: "models", itemId: "'+model.id+'"})',adminPages[1].items.push(model)},getModel:function(modelId){return _.find(adminPages[1].items,function(model){return model.id===modelId})}}}]),angular.module("core").factory("Dictionaries",["$resource",function($resource){return $resource("api/dictionary/:dictId",{dictId:"@_id"})}]),angular.module("core").factory("authInterceptor",["$q","$injector",function($q,$injector){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],roles:null===options.roles||"undefined"==typeof options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]}),this.addMenuItem("topbar",{title:"Main",state:"home",roles:["*"]})}]),angular.module("core").config(["NotificationProvider",function(NotificationProvider){NotificationProvider.setOptions({delay:1e5,startTop:20,startRight:10,verticalSpacing:20,horizontalSpacing:20,positionX:"right",positionY:"bottom"})}]),angular.module("core").service("NotificationService",["$q","Notification",function($q,NotificationAngular){var promise,hidden,disabled=!1;"undefined"!=typeof document.hidden?hidden="hidden":"undefined"!=typeof document.mozHidden?hidden="mozHidden":"undefined"!=typeof document.msHidden?hidden="msHidden":"undefined"!=typeof document.webkitHidden&&(hidden="webkitHidden");var showNotify=function(data){return document.hidden?new Notification(data.title,{body:data.content,icon:data.icon}):new Notification(data.title,{body:data.content,icon:data.icon})};return{init:function(){if("Notification"in window){if("granted"===Notification.permission)return;var deferred=$q.defer();Notification.requestPermission(function(permission){"granted"!==permission&&(disabled=!0),deferred.resolve(!disabled)}),promise=deferred.promise}else disabled=!0},showNotification:function(data){promise?promise.then(function(granted){granted&&showNotify(data)}):disabled||showNotify(data)}}}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),angular.module("core").service("SystemData",["$http","$q",function($http,$q){return{getData:function(){var deferred=$q.defer();return $http.get("/api").success(function(data){deferred.resolve(data)}),deferred.promise}}}]),angular.module("posts").run(["Menus","AdminService","Posts",function(Menus,Admin,Posts){Menus.addMenuItem("topbar",{title:"Posts",state:"posts.list",roles:["*"]}),Admin.addModel({id:"posts",title:"Posts",model:Posts,options:{name:{title:"Title",value:"title"},fields:[{title:"Type",value:"postType"},{title:"Creation Date",value:"created"}],route:"posts.view",modelId:"postId"}})}]),angular.module("posts").config(["$stateProvider",function($stateProvider){$stateProvider.state("posts",{"abstract":!0,url:"/posts",template:"<ui-view/>"}).state("posts.list",{url:"",templateUrl:"modules/posts/client/views/list-posts.client.view.html"}).state("posts.create",{url:"/create",templateUrl:"modules/posts/client/views/edit-post.client.view.html",data:{roles:["user","admin"]}}).state("posts.view",{url:"/:postId",templateUrl:"modules/posts/client/views/view-post.client.view.html"}).state("posts.edit",{url:"/:postId/edit",templateUrl:"modules/posts/client/views/edit-post.client.view.html",data:{roles:["user","admin"]}}).state("users.feed",{url:"/feed",templateUrl:"modules/posts/client/views/user-feed.client.view.html",controller:"UserFeedController"})}]),angular.module("posts").controller("PostsController",["$scope","$stateParams","$location","Authentication","Posts","Dictionaries",function($scope,$stateParams,$location,Authentication,Posts,Dictionaries){$scope.$on("imageURLChanged",function(ev,url){$scope.post.previewImg=url}),$scope.authentication=Authentication,$scope.update=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","articleForm"),!1;var post;$scope.post._id?(post=$scope.post,post.$update(function(){$location.path("posts/"+post._id)},function(errorResponse){$scope.error=errorResponse.data.message})):(post=new Posts({title:this.post.title,showGlobal:this.post.showGlobal,preview:this.post.preview,content:this.post.content,postType:this.post.postType,previewImg:this.post.previewImg}),post.$save(function(response){$location.path("posts/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message}))},$scope.remove=function(post){if(post){post.$remove();for(var i in $scope.posts)$scope.posts[i]===post&&$scope.posts.splice(i,1)}else $scope.post.$remove(function(){$location.path("posts")})},$scope.find=function(){$scope.posts=Posts.query()},$scope.findOne=function(){$scope.post=Posts.get({postId:$stateParams.postId}),$scope.options=[{title:"Edit",icon:"edit",sref:'posts.edit({postId: "'+$stateParams.postId+'"})'},{title:"Remove",icon:"trash",click:$scope.remove}]},$scope.getDictionary=function(){$scope.types=Dictionaries.get({dictId:"POST_TYPE"})},$scope.initUpdateForm=function(){$scope.types=Dictionaries.get({dictId:"POST_TYPE"}),$stateParams.postId?($scope.updateValue="Update",Posts.get({postId:$stateParams.postId},function(post){$scope.post=post,$scope.authentication.isAdmin()||$scope.authentication.hasAccess($scope.post.user._id)||$location.path("forbidden")})):($scope.updateValue="Create",$scope.post={})},$scope.onCancel=function(){$location.path("/posts")}}]).controller("UserFeedController",["$scope","$stateParams","Feed",function($scope,$stateParams,Feed){var userId=$stateParams.userId;Feed.getData(userId).then(function(posts){$scope.posts=posts})}]),angular.module("posts").factory("Feed",["$http","$q",function($http,$q){return{getData:function(user,type){var deferred=$q.defer(),urlParams={};return type&&(urlParams.type=type),$http.get("/api/users/"+user+"/feed",{params:urlParams}).success(function(data){deferred.resolve(data)}),deferred.promise}}}]),angular.module("posts").factory("News",["$http","$q",function($http,$q){return{getData:function(type,limit){var deferred=$q.defer(),urlParams={};return type&&(urlParams.type=type),limit&&(urlParams.limit=limit),$http.get("/api/news",{params:urlParams}).success(function(data){deferred.resolve(data)}),deferred.promise}}}]),angular.module("posts").factory("Posts",["$resource",function($resource){return $resource("api/posts/:postId",{postId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html"}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html"}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html"}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html"})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]).run(["AdminService","Users",function(Admin,Users){Admin.addModel({id:"users",title:"Users",model:Users,options:{name:{title:"Username",value:"username"},fields:[{title:"Email",value:"email"},{title:"Roles",value:"roles"}],route:"users.view",modelId:"userId"}})}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("users.list",{url:"/users",template:""}).state("users",{url:"/users/:userId","abstract":!0,templateUrl:"modules/users/client/views/users/view-user.client.view.html",controller:"UserViewController",resolve:{userResolve:["$stateParams","Users",function($stateParams,Users){return Users.get({userId:$stateParams.userId})}]}}).state("users.view",{url:"",templateUrl:"modules/users/client/views/users/view-user-info.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Users",function($stateParams,Users){return Users.get({userId:$stateParams.userId})}]}}).state("users.edit",{url:"/edit",templateUrl:"modules/users/client/views/users/edit-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Users",function($stateParams,Users){return Users.get({userId:$stateParams.userId})}]}})}]),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication",function($scope,$state,$http,$location,$window,Authentication){$scope.authentication=Authentication,$scope.error=$location.search().err,$scope.authentication.user&&$location.path("/"),$scope.signup=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.signin=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.setUser(response),$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.changeUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","passwordForm"),!1)}}]),angular.module("users").controller("ChangeProfilePictureController",["$scope","$http","$timeout","$window","Authentication","FileUploader",function($scope,$http,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageUrl=$scope.user.profileImageURL,$scope.onFinishUpload=function(url){$http.post("/api/users/picture",{filename:url}).success(function(data){$scope.user=Authentication.user=data})}}]),angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){
$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=new Users($scope.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user,$scope.tabs=[{id:"profile",state:"settings.profile",title:"Edit Profile",items:[]},{id:"picture",state:"settings.picture",title:"Change Profile Picture",items:[]},{id:"password",state:"settings.password",title:"Change Password",items:[]}]}]),angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve",function($scope,$state,Authentication,userResolve){$scope.authentication=Authentication,$scope.user=userResolve,$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users")}))},$scope.update=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=$scope.user;user.$update(function(){$state.go("users.view",{userId:user._id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]).controller("UserViewController",["$scope","$state","userResolve","Authentication",function($scope,$state,userResolve,Authentication){userResolve.$promise.then(function(user){$scope.user=user,$scope.profileTabs=[{title:"Overview",sref:"users.view({userId: user._id})",icon:"home",show:!0},{title:"Feed",sref:"users.feed({userId: user._id})",icon:"bullhorn",show:!0},{title:"Files",sref:"users.files({userId: user._id})",icon:"folder-open",show:!0},{title:"Administration",sref:"users.edit({userId: user._id})",icon:"lock",show:$scope.authentication.isAdmin()}]}),$scope.authentication=Authentication}]),angular.module("users").directive("lowercase",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}}}),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user,isAdmin:function(){return this.user&&-1!==this.user.roles.indexOf("admin")},hasAccess:function(id){return this.user&&this.user._id===id},setUser:function(user){this.user=user}};return auth}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);